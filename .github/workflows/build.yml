name: Build release

on:
  [workflow_dispatch]

env:
  MAIN_PY: "main.py"
  THE_NAME: "shed-ledger"
  THE_NAME_BIN: "shld"

jobs:
  job1:
    name: Build and upload executable binary
    strategy:
      matrix:
        # os: [ubuntu-20.04,windows-2019 ]
        os: [ubuntu-20.04]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Check if on Windows
        if: ${{ contains(matrix.os,'windows') == true && inputs.NO_WINDOWS == true }}
        run: exit 1

      - name: Download repo
        uses: actions/checkout@v4
        with:
          # repository: "${{ github.repository_owner }}/${{ inputs.THE_NAME }}"
          # ref: main
          # token: ${{ secrets.GH_TOKEN }}
          path: source-code
          sparse-checkout: .

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9.6"

      - name: Setup Python (req.txt)
        if: ${{ hashFiles('req.txt') != '' }}
        working-directory: source-code
        run: |
          pip install -r req.txt
          mkdir out

      - name: Setup Python (install Nuitka)
        run: |
          pip install nuitka

      - name: Build for Linux
        if: ${{ contains(matrix.os,'windows') == false }}
        working-directory: source-code
        run: |
          python -m nuitka --onefile --onefile-no-compression --assume-yes-for-downloads "main.py" --output-dir="the-output" --output-filename="${{ env.THE_NAME_BIN }}.bin"
          mv "the-output/${{ env.THE_NAME_BIN }}.bin" "the-output/${{ env.THE_NAME_BIN }}.${{ matrix.os }}.bin"
          find the-output

      - name: Build for Windows
        if: ${{ contains(matrix.os,'windows') == true }}
        working-directory: source-code
        run: |
          python -m nuitka --onefile --onefile-no-compression --assume-yes-for-downloads "main.py" --output-dir="the-output" --output-filename="${{ env.THE_NAME_BIN }}.exe"
          mv "the-output/${{ env.THE_NAME_BIN }}.exe" "the-output/${{ env.THE_NAME_BIN }}.${{ matrix.os }}.exe"
          ls the-output

      - uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.os }}"
          if-no-files-found: error
          path: |
            ./source-code/the-output/${{ env.THE_NAME_BIN }}.${{ matrix.os }}.bin
            ./source-code/the-output/${{ env.THE_NAME_BIN }}.${{ matrix.os }}.exe

  job2:
    name: Get date of today
    needs: job1
    runs-on: ubuntu-latest
    outputs:
      the_date: ${{ steps.DateToday.outputs.TODAY }}
      the_upload_url: ${{ steps.CreateRelease.outputs.upload_url }}

    steps:
      - name: Get date and time
        id: DateToday
        run: |
          RIGHT_NOW=$(date +%Y-%m-%d-%H-%M-%S)
          echo "Today is: $RIGHT_NOW"
          echo "TODAY=$RIGHT_NOW >> $GITHUB_OUTPUT"

      - name: Printing date again
        run: echo "${{ needs.job2.outputs.the_date }}"
      - name: Create release
        id: CreateRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          # tag_name: "${{ needs.job2.outputs.the_date }}"
          tag_name: "${{ steps.DateToday.outputs.TODAY }}"
          # release_name: "${{ needs.job2.outputs.the_date }}"
          release_name: "${{ steps.DateToday.outputs.TODAY }}"
          draft: false
          prerelease: false
  
  job3:
    name: Attach artifact as an asset
    needs: [job2]

    strategy:
      max-parallel: 1
      matrix:
        # binary: [ubuntu-20.04,windows-2019 ]
        binary: [ubuntu-20.04]

    runs-on: ubuntu-latest
    steps:
      - name: Download repo (one last time)
        uses: actions/checkout@v4
        with:
          path: repo
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.binary }}
          path: "${{ env.THE_NAME }}"

      - name: Check the landscape
        run: |
          mkdir -v "${{ env.THE_NAME }}/sources"
          cp -v repo/htmx.min.js "${{ env.THE_NAME }}/sources/htmx.min.js"
          cp -v repo/custom.css "${{ env.THE_NAME }}/sources/custom.css"
          cp -v repo/config.yaml "${{ env.THE_NAME }}/config.yaml"
          zip -0 -r "${{ env.THE_NAME }}-${{ matrix.binary }}.zip" "${{ env.THE_NAME }}"
          find .

      - name: Attach the artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

        with:
          upload_url: "${{ needs.job2.outputs.the_upload_url }}"
          asset_path: "${{ env.THE_NAME }}-${{ matrix.binary }}.zip"
          asset_name: "${{ env.THE_NAME }}-${{ matrix.binary }}.zip"
          asset_content_type: application/octet-stream

